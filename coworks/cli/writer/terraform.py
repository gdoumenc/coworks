from dataclasses import dataclass
from typing import List

from .writer import TemplateWriter
from ... import TechMicroService


@dataclass(frozen=True)
class Entry:
    app: TechMicroService
    prefix: str
    last: str
    methods: List[str]

    @property
    def full_path(self):
        if self.last is None:
            return 'root'
        return f"{self.prefix}_{self.last}" if self.prefix else self.last

    @property
    def cors(self):
        cors = self.app.api.cors
        if cors:
            if type(cors) == bool:
                cors = {"Access-Control-Allow-Origin": "*"}
            elif type(cors) == list:
                cors = {"Access-Control-Allow-Origin": ",".join(cors)}
            if 'Access-Control-Allow-Headers' not in cors:
                cors.setdefault('Access-Control-Allow-Headers',
                                "Authorization,Content-Type,X-Amz-Date,X-Amz-Security-Token,X-Api-Key")
        return cors


class TerraformWriter(TemplateWriter):

    def __init__(self, app=None, name='terraform', **kwargs):
        super().__init__(app=app, name=name, **kwargs)

    @property
    def default_template_filenames(self):
        return ['terraform.j2']

    def _export_header(self, **kwargs):
        print("// Do NOT edit this file as it is auto-generated by cws\n", file=self.output)

    @property
    def entries(self):
        """Returns the list of flatten path (prev, last, keys)."""
        all_pathes_id = {}

        def normalize(_path):
            if _path:
                return f"{_path.replace('{', '').replace('}', '')}"
            return None

        def add_entry(previous, last, meth):
            entry = Entry(self.app, normalize(previous), last, meth)
            combined_path = normalize(entry.full_path)
            if combined_path not in all_pathes_id:
                all_pathes_id[combined_path] = entry
            return entry.full_path

        for route, methods in self.app.routes.items():
            prev_path = None
            splited_route = route[1:].split('/')

            # special root case
            if splited_route == ['']:
                add_entry(None, None, methods.keys())
                continue

            # creates intermediate resources
            last_path = splited_route[-1:][0]
            for prev in splited_route[:-1]:
                prev_path = add_entry(prev_path, prev, None)

            # set entryes keys for last entry
            add_entry(prev_path, last_path, methods.keys())

        return all_pathes_id


class TerraformPlanWriter(TerraformWriter):

    def __init__(self, app=None, name='plan', data=None, template_filenames=None, **kwargs):
        template_filenames = template_filenames or ['plan.j2']
        data = data or {'cmd': 'plan'}
        super().__init__(app, name=name, template_filenames=template_filenames, data=data, **kwargs)

    def _export_header(self, **kwargs):
        pass

    def _format(self, content):
        return content.translate(str.maketrans('\n', ' ', '\t\r'))
