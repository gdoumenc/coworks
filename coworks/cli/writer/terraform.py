from .writer import TemplateWriter


class TerraformWriter(TemplateWriter):

    def __init__(self, app=None, name='terraform', **kwargs):
        super().__init__(app=app, name=name, **kwargs)

    @property
    def default_template_filenames(self):
        return ['terraform.j2']

    def _export_header(self, **kwargs):
        print("// Do NOT edit this file as it is auto-generated by cws\n", file=self.output)

    @property
    def entries(self):
        """Returns the list of flatten path (prev, last, keys)."""

        def uid(_path):
            if _path:
                return f"{self.app.app_name}_{_path.replace('{', '').replace('}', '')}"
            return None

        def combine(_prev, _path):
            return f"{_prev}_{_path}" if _prev else _path

        all_pathes_id = {}
        for route, entry in self.app.routes.items():
            prev_path_id = None
            splited_route = route[1:].split('/')

            # special root case
            if splited_route == ['']:
                all_pathes_id[uid('root')] = (None, None, entry.keys())
                continue

            # creates intermediate resources
            last = splited_route[-1:][0]
            for path in splited_route[:-1]:
                current_path_id = combine(prev_path_id, path)
                if uid(current_path_id) not in all_pathes_id:
                    all_pathes_id[uid(current_path_id)] = (uid(prev_path_id), path, None)
                prev_path_id = current_path_id

            # set entryes keys for last entry
            current_path_id = combine(prev_path_id, last)
            all_pathes_id[uid(current_path_id)] = (uid(prev_path_id), last, entry.keys())

        return all_pathes_id


class TerraformPlanWriter(TerraformWriter):

    def __init__(self, app=None, name='plan', data=None, template_filenames=None, **kwargs):
        template_filenames = template_filenames or ['plan.j2']
        data = data or {'cmd': 'plan'}
        super().__init__(app, name=name, template_filenames=template_filenames, data=data, **kwargs)

    def _export_header(self, **kwargs):
        pass

    def _format(self, content):
        return content.translate(str.maketrans('\n', ' ', '\t\r'))
