import os
from abc import ABC, abstractmethod

import yaml
from jinja2 import Environment, PackageLoader, select_autoescape

from .coworks import TechMicroService


class Writer(ABC):

    def __init__(self, app: TechMicroService = None):
        self.output = None
        app.writer = self

        if app is not None:
            self.app = app
            self.init_app(app)

    def init_app(self, app):
        pass

    @staticmethod
    def get_writer(_format, app):
        if _format == 'list':
            return ListWriter(app=app)
        if _format == 'open-api':
            return OpenApiWriter(app=app)
        if _format == 'terraform':
            return TerraformWriter(app=app)
        raise ValueError(f"Undefined format for export : {_format}")

    def export_all(self, output):
        self.output = None
        if output is not None:
            self.output = open(output, 'w+')
            print("// Do NOT edit this file as it is auto-generated by cws\n", file=self.output)
        self.export()

    @abstractmethod
    def export(self):
        pass


class ListWriter(Writer):

    def export(self):
        for k in self.app.routes.keys():
            print(k, file=self.output)


class OpenApiWriter(Writer):
    """Export the microservice in swagger format."""

    def export(self):
        specs = {
            'openapi': '3.0.0',
            'version': getattr(self.app, 'version'),
            'paths': self.export_paths(),
            'info': {
                'description': self.app.__doc__,
                'title': type(self.app).__name__,
            },
        }

        print(yaml.dump(reduce_not_none(specs)), file=self.output)

    def export_paths(self):
        paths = {}
        for route, entry in self.app.routes.items():
            entries = {}
            for method, infos in entry.items():
                entries[method.lower()] = {
                    'description': getattr(self.app, infos.view_name).__doc__
                }
            paths[route] = entries
        return paths


class TerraformWriter(Writer):

    def __init__(self, app=None, data=None, template_filenames=None, env=None):
        super().__init__(app)
        self.template_filenames = template_filenames or ['terraform.j2']
        self.env = env or Environment(
            loader=PackageLoader("coworks", "templates"),
            autoescape=select_autoescape(['html', 'xml'])
        )
        self.data = data or {}

    def export(self):
        data = {
            'module': self.app.__module__,
            'app': self.app.name,
            'entries': self.entries,
        }
        for template_filename in self.template_filenames:
            template = self.env.get_template(template_filename)
            print(template.render(**data, **self.data), file=self.output)

    @property
    def entries(self):

        def uid(_path):
            if _path:
                return f"{self.app.name}_{_path.replace('{', '').replace('}', '')}"
            return None

        def combine(_prev, _path):
            return f"{_prev}_{_path}" if _prev else _path

        all_pathes_id = {}
        for route, entry in self.app.routes.items():
            prev_path_id = None
            splited_route = route[1:].split('/')

            # special root case
            if splited_route == ['']:
                all_pathes_id[uid('root')] = (None, None, entry.keys())
                continue

            last = splited_route[-1:][0]
            for path in splited_route[:-1]:
                current_path_id = combine(prev_path_id, path)
                if current_path_id not in all_pathes_id:
                    all_pathes_id[uid(current_path_id)] = (uid(prev_path_id), path, None)
                prev_path_id = current_path_id

            # set entryes keys for last entry
            current_path_id = combine(prev_path_id, last)
            all_pathes_id[uid(current_path_id)] = (uid(prev_path_id), last, entry.keys())

        return all_pathes_id


def reduce_not_none(data):
    """Remove all entries where value is None."""
    return dict((k, v) for k, v in data.items() if v is not None)
