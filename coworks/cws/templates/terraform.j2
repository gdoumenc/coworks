# ---------------------------------------------------------------------------------------------------------------------
# LAMBDA
# ---------------------------------------------------------------------------------------------------------------------

data "archive_file" "{{ module_file }}" {
  source_file = "{{ source_file }}.py"
  output_path = "{{ module_file }}.zip"
  type = "zip"
}

resource "aws_lambda_function" "{{ ms_name }}" {
filename =data.archive_file.{{ module_file }}.output_path
function_name = "{{ ms_name }}"
role = aws_iam_role.{{ ms_name }}.arn
handler = "{{ module_file }}.{{ handler }}"
runtime = "python3.7"
description = "This is my first coworks microservice"

source_code_hash = filebase64sha256(data.archive_file.{{ module_file }}.output_path)
layers = [aws_lambda_layer_version.coworks_layer.arn]

tags = {
Name: "{{ module_file }}"
Creator: "coworks"
}
}

resource "aws_lambda_permission" "{{ ms_name }}" {
statement_id = "AllowExecutionFromAPIGateway"
action = "lambda:InvokeFunction"
function_name = aws_lambda_function.{{ ms_name }}.function_name
principal = "apigateway.amazonaws.com"
}

resource "aws_iam_role" "{{ ms_name }}" {
name = "{{ ms_name }}"
assume_role_policy = data.aws_iam_policy_document.{{ ms_name }}.json
}
data "aws_iam_policy_document" "{{ ms_name }}" {
statement {
effect = "Allow"
principals {
identifiers = [
"apigateway.amazonaws.com",
"lambda.amazonaws.com",
]
type = "Service"
}
actions = ["sts:AssumeRole"]
}
}
resource "aws_iam_role_policy_attachment" "{{ ms_name }}" {
role = aws_iam_role.{{ ms_name }}.name
policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
}

resource "aws_lambda_layer_version" "coworks_layer" {
layer_name = "coworks"
filename   = "layer.zip"

compatible_runtimes = ["python3.7"]
}

# ---------------------------------------------------------------------------------------------------------------------
# APIGATEWAY
# ---------------------------------------------------------------------------------------------------------------------

resource "aws_api_gateway_rest_api" "{{ ms_name }}" {
name = "{{ ms_name }}"
description = "This is my API for my first coworks microservice"
}

locals {
{{ ms_name }} = {
api_id: aws_api_gateway_rest_api.{{ ms_name }}.id
root_id: aws_api_gateway_rest_api.{{ ms_name }}.root_resource_id
}
}

resource "aws_api_gateway_authorizer" "{{ ms_name }}" {
name = "{{ module_file }}-{{ ms_name }}-auth"
rest_api_id = local.{{ ms_name }}.api_id
authorizer_uri = aws_lambda_function.{{ ms_name }}.invoke_arn
}

{% for res, entry in writer.entries.items() %}
  {%- if entry.path %}
    resource "aws_api_gateway_resource" "{{ ms_name }}_{{ res }}" {
    rest_api_id = local.{{ ms_name }}.api_id
    {% if entry.parent_is_root %}
      parent_id = local.{{ ms_name }}.root_id
    {% else %}
      parent_id = aws_api_gateway_resource.{{ ms_name }}_{{ entry.parent_uid }}.id
    {% endif %}
    path_part = "{{ entry.path }}"
    }
  {% endif -%}
  {%- if entry.methods %}
    {% for method in entry.methods %}
      resource "aws_api_gateway_method" "{{ ms_name }}_{{ res }}_{{ method }}" {
      rest_api_id = local.{{ ms_name }}.api_id
      {%- if entry.is_root %}
        resource_id = local.{{ ms_name }}.root_id
      {% else %}
        resource_id = aws_api_gateway_resource.{{ ms_name }}_{{ res }}.id
      {% endif -%}
      http_method = "{{ method }}"
      authorization = "CUSTOM"
      authorizer_id = aws_api_gateway_authorizer.{{ ms_name }}.id
      }

      resource "aws_api_gateway_integration" "{{ ms_name }}_{{ res }}_{{ method }}" {
      rest_api_id = local.{{ ms_name }}.api_id
      {%- if entry.is_root %}
        resource_id = local.{{ ms_name }}.root_id
      {% else %}
        resource_id = aws_api_gateway_resource.{{ ms_name }}_{{ res }}.id
      {% endif -%}
      http_method = aws_api_gateway_method.{{ ms_name }}_{{ res }}_{{ method }}.http_method
      integration_http_method = "POST"
      type = "AWS_PROXY"
      uri = aws_lambda_function.{{ ms_name }}.invoke_arn
      }
    {% endfor %}

    {%- if entry.cors.allow_origin %}
      resource "aws_api_gateway_method" "{{ ms_name }}_{{ res }}_OPTIONS" {
      rest_api_id = local.{{ ms_name }}.api_id
      {%- if entry.is_root %}
        resource_id = local.{{ ms_name }}.root_id
      {% else %}
        resource_id = aws_api_gateway_resource.{{ ms_name }}_{{ res }}.id
      {% endif -%}
      http_method = "OPTIONS"
      authorization = "NONE"
      }

      resource "aws_api_gateway_integration" "{{ ms_name }}_{{ res }}_OPTIONS" {
      rest_api_id = local.{{ ms_name }}.api_id
      {%- if entry.is_root %}
        resource_id = local.{{ ms_name }}.root_id
      {% else %}
        resource_id = aws_api_gateway_resource.{{ ms_name }}_{{ res }}.id
      {% endif -%}
      http_method = aws_api_gateway_method.{{ ms_name }}_{{ res }}_OPTIONS.http_method
      type = "MOCK"
      request_templates = {
      "application/json" = "{ \"statusCode\": 200 }"
      }
      }
      resource "aws_api_gateway_integration_response" "{{ ms_name }}_{{ res }}_OPTIONS" {
      rest_api_id = local.{{ ms_name }}.api_id
      {%- if entry.is_root %}
        resource_id = local.{{ ms_name }}.root_id
      {% else %}
        resource_id = aws_api_gateway_resource.{{ ms_name }}_{{ res }}.id
      {% endif -%}
      http_method = aws_api_gateway_method.{{ ms_name }}_{{ res }}_OPTIONS.http_method
      response_parameters = {
      {%- for k,v in entry.cors.get_access_control_headers().items() %}
        "method.response.header.{{ k }}" = "'{{ v }}'",
      {% endfor -%}
      }
      status_code = 200
      depends_on = [
      aws_api_gateway_integration.{{ ms_name }}_{{ res }}_OPTIONS,
      aws_api_gateway_method_response.{{ ms_name }}_{{ res }}_OPTIONS,
      ]
      }
      resource "aws_api_gateway_method_response" "{{ ms_name }}_{{ res }}_OPTIONS" {
      rest_api_id = local.{{ ms_name }}.api_id
      {%- if entry.is_root %}
        resource_id = local.{{ ms_name }}.root_id
      {% else %}
        resource_id = aws_api_gateway_resource.{{ ms_name }}_{{ res }}.id
      {% endif -%}
      http_method = aws_api_gateway_method.{{ ms_name }}_{{ res }}_OPTIONS.http_method
      status_code = 200
      response_models = {
      "application/json" = "Empty"
      }
      response_parameters = {
      "method.response.header.Access-Control-Allow-Headers" = true,
      "method.response.header.Access-Control-Allow-Methods" = true,
      "method.response.header.Access-Control-Allow-Origin" = true
      }

      depends_on = [
      aws_api_gateway_method.{{ ms_name }}_{{ res }}_OPTIONS,
      ]
      }
    {% endif -%}
  {% endif -%}
{% endfor %}


resource "aws_api_gateway_deployment" "{{ ms_name }}" {
depends_on = [
{%- for res, entry in writer.entries.items() %}{%- if entry.methods %}{% for method in entry.methods %}
  aws_api_gateway_integration.{{ ms_name }}_{{ res }}_{{ method }},
{% endfor %}{% endif %}{% endfor -%}
]
rest_api_id = local.{{ ms_name }}.api_id
stage_name = "dev"
}


#
# OUTPUT
#

output "{{ ms_name }}" {
value = {
invoke-url = aws_api_gateway_deployment.{{ ms_name }}.invoke_url
}
}