
# ---------------------------------------------------------------------------------------------------------------------
# EVENT BRIDGE
# ---------------------------------------------------------------------------------------------------------------------

{% if app.schedule_entries %}
{%- for name, entry in app.schedule_entries.items() %}
resource "aws_lambda_permission" "{{ resource_name }}_allow_eventbridge" {
  provider = aws.{{ resource_name }}
  count = local.{{ resource_name }}_when_stage
  statement_id = "AllowExecutionFromEventBridge"
  action = "lambda:InvokeFunction"
  function_name = local.{{ resource_name }}_lambda_name
  principal = "events.amazonaws.com"
  source_arn = aws_cloudwatch_event_rule.{{ resource_name }}_{{ name }}[0].arn
}
resource "aws_cloudwatch_event_rule" "{{ resource_name }}_{{ name }}" {
  provider = aws.{{ resource_name }}
  count = local.{{ resource_name }}_when_stage
  name = "{{ name }}-{{ workspace }}-{{ resource_name }}"
  description = "{{ entry.desc }}"
  schedule_expression = "{{ entry.exp }}"
}
resource "aws_cloudwatch_event_target" "{{ resource_name }}_{{ name }}" {
  provider = aws.{{ resource_name }}
  count = local.{{ resource_name }}_when_stage
  rule = aws_cloudwatch_event_rule.{{ resource_name }}_{{ name }}[0].name
  arn = local.{{ resource_name }}_lambda_arn
  input = <<-EOT
  {
    "type":"CWS_SCHEDULE_EVENT",
    "entry_name":"{{ name }}",
    "schedule_name":"{{ entry.name }}"
  }
  EOT
}
{% endfor %}
{% endif %}