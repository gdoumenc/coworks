{% set resource_id = "{}-{}".format(module_file, ms_name) %}
{% set resource_name = "{}-{}".format(module_file, ms_name) %}

# ---------------------------------------------------------------------------------------------------------------------
# LAMBDA
# ---------------------------------------------------------------------------------------------------------------------

data "local_file" "environment_variables_{{ resource_id }}" {
  filename = "../{{ project_dir }}/{{ app_config["environment_variables_file"]}}"
}

resource "aws_lambda_layer_version" "{{ resource_id }}" {
  for_each = {for layer_name in local.custom-layers-{{ resource_id }} :  layer_name => "${layer_name}.zip"}
  layer_name = "{{ resource_id }}-${each.key}"
  filename   = each.value
  source_code_hash = filebase64sha256(each.value)
  compatible_runtimes = ["python3.7"]
}

data "aws_lambda_layer_version" "{{ resource_id }}" {
  for_each = {for layer_name in local.common-layers-{{ resource_id }}: layer_name => layer_name}
  layer_name = each.value
}

data "aws_s3_bucket_object" "{{ resource_id }}" {
  bucket = "coworks-microservice"
  key    = "source_archives/{{ resource_id }}/archive.zip"
}

data "aws_s3_bucket_object" "{{ resource_id }}-b64sha256" {
  bucket = "coworks-microservice"
  key    = "source_archives/{{ resource_id }}/archive.zip.b64sha256"
}

locals{
    custom-layers-{{ resource_id }} = terraform.workspace == "default" ? [] : {{ export_config["custom-layers"] | tojson}}
    common-layers-{{ resource_id }} = terraform.workspace == "default" ? [] : {{ export_config["common-layers"] | tojson }}
}

resource "aws_lambda_function" "{{ resource_id }}" {
  count = terraform.workspace != "default" ? 1 : 0
  function_name = "{{ resource_id }}-${terraform.workspace}"
  s3_bucket = data.aws_s3_bucket_object.{{ resource_id }}.bucket
  s3_key = data.aws_s3_bucket_object.{{ resource_id }}.key
  source_code_hash =  data.aws_s3_bucket_object.{{ resource_id }}-b64sha256.body
  role = aws_iam_role.{{ resource_id }}[0].arn
  handler = "{{ module_file }}.{{ handler }}"
  layers = concat([for layer in aws_lambda_layer_version.{{ resource_id }}: layer.arn], [for layer in data.aws_lambda_layer_version.{{ resource_id }}: layer.arn])
  runtime = "python3.7"
  timeout = 10
  environment {
    variables = jsondecode(data.local_file.environment_variables_{{ resource_id }}.content)
  }
  tags = {
    Product: "microservice"
    Target: "{{ module_file }}"
    Creator: "coworks"
    Stage = terraform.workspace
  }
}

data "aws_lambda_function" "{{ resource_id }}" {
  count = terraform.workspace == "default" && "{{ step }}" == "update" ? 1 : 0
  function_name = "{{ resource_id }}-{{ export_config["workspace"] }}"
}

resource "aws_lambda_permission" "{{ resource_id }}" {
  count = terraform.workspace != "default" ? 1 : 0
  statement_id = "AllowExecutionFromAPIGateway"
  action = "lambda:InvokeFunction"
  function_name = join("", local.{{ resource_id }}.lambda_function.*.function_name)
  principal = "apigateway.amazonaws.com"
  source_arn = "${join("", data.aws_api_gateway_rest_api.{{ resource_id }}.*.execution_arn)}/*/*"
  depends_on = [aws_lambda_function.{{ resource_id }}]
}



{% for s in app.trigger_source %}
  {% if s.source in ['every','at'] %}
    resource "aws_cloudwatch_event_rule" "{{ module_file }}_{{ s.name }}" {
      count = terraform.workspace != "default" ? 1 : 0
      name = "{{ module_file }}-{{ s.name }}"
      schedule_expression = "{{ s.value }}"
      tags = {
        Product: "microservice"
        Target: "{{ module_file }}"
        Creator: "coworks"
        Stage = "{{ export_config["workspace"] }}"
        Customer = local.customer_name
      }
    }
    resource "aws_cloudwatch_event_target" "{{ module_file }}_{{ s.name }}" {
      count = terraform.workspace != "default" ? 1 : 0
      target_id = "{{ module_file }}_{{ s.name }}"
      rule = aws_cloudwatch_event_rule.{{ s.name }}.name
      arn = local.lambda_function.{{ resource_id }}.arn
    }
    resource "aws_lambda_permission" "{{ s.name }}" {
      count = terraform.workspace != "default" ? 1 : 0
      statement_id  = "AllowExecutionFromCloudWatchEvent"
      action = "lambda:InvokeFunction"
      function_name = local.lambda_function.{{ resource_id }}.function_name
      principal = "events.amazonaws.com"
      source_arn = aws_cloudwatch_event_rule.{{ module_file }}_{{ s.name }}.arn
    }
  {% endif %}
{% endfor %}

# ---------------------------------------------------------------------------------------------------------------------
# IAM ROLE
# ---------------------------------------------------------------------------------------------------------------------

resource "aws_iam_role" "{{ resource_id }}" {
  count = terraform.workspace != "default" ? 1 : 0
  name = "{{ resource_id }}-${terraform.workspace}"
  assume_role_policy = data.aws_iam_policy_document.{{ resource_id }}[0].json
  }

data "aws_iam_policy_document" "{{ resource_id }}" {
  count = terraform.workspace != "default" ? 1 : 0
  statement {
    effect = "Allow"
    principals {
      identifiers = [
        "apigateway.amazonaws.com",
        "lambda.amazonaws.com",
      ]
      type = "Service"
    }
    actions = ["sts:AssumeRole"]
  }
}

resource "aws_iam_role_policy_attachment" "{{ resource_id }}" {
  count = terraform.workspace != "default" ? 1 : 0
  role = aws_iam_role.{{ resource_id }}[0].name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
}

{% for s in app.trigger_source %}
  {% if s.source in ['every','at'] %}
    resource "aws_cloudwatch_event_rule" "{{ module_file }}_{{ s.name }}" {
      count = terraform.workspace != "default" ? 1 : 0
      name = "{{ module_file }}-{{ s.name }}"
      schedule_expression = "{{ s.value }}"
      tags = {
        Product: "microservice"
        Target: "{{ module_file }}"
        Creator: "coworks"
        Stage = "{{ export_config["workspace"] }}"
      }
    }
    resource "aws_cloudwatch_event_target" "{{ module_file }}_{{ s.name }}" {
      count = terraform.workspace != "default" ? 1 : 0
      target_id = "{{ module_file }}_{{ s.name }}"
      rule = aws_cloudwatch_event_rule.{{ s.name }}.name
      arn = aws_lambda_function.{{ module_file }}.arn
    }
    resource "aws_lambda_permission" "{{ s.name }}" {
      count = terraform.workspace != "default" ? 1 : 0
      statement_id  = "AllowExecutionFromCloudWatchEvent"
      action = "lambda:InvokeFunction"
      function_name = aws_lambda_function.{{ module_file }}.function_name
      principal = "events.amazonaws.com"
      source_arn = aws_cloudwatch_event_rule.{{ module_file }}_{{ s.name }}.arn
    }
  {% endif %}
{% endfor %}

# ---------------------------------------------------------------------------------------------------------------------
# APIGATEWAY
# ---------------------------------------------------------------------------------------------------------------------

resource "aws_api_gateway_rest_api" "{{ resource_id }}" {
  count = terraform.workspace == "default" ? 1 : 0
  name = "{{ resource_name }}"
  description = "A prendre de la class"
  {% if export_config["binary_media_types"] %}
  binary_media_types = {{ export_config["binary_media_types"] | tojson }}
  {% endif %}
  tags = {
    Product: "microservice"
    Creator: "coworks"
  }
}

data "aws_api_gateway_rest_api" "{{ resource_id }}" {
  count = (terraform.workspace != "default") ? 1 : 0
  name = "{{ resource_name }}"
}

locals {
  {{ resource_id }} = {
    api_id: terraform.workspace == "default" ? join("", aws_api_gateway_rest_api.{{ resource_id }}.*.id) : join("", data.aws_api_gateway_rest_api.{{ resource_id }}.*.id)
    api_root_id: terraform.workspace == "default" ? join("", aws_api_gateway_rest_api.{{ resource_id }}.*.root_resource_id) : join("", data.aws_api_gateway_rest_api.{{ resource_id }}.*.root_resource_id)
    authorizer_uri = join("", data.aws_lambda_function.{{ resource_id }}.*.invoke_arn)
    lambda_uri = join("", data.aws_lambda_function.{{ resource_id }}.*.invoke_arn)
    lambda_function = terraform.workspace != "default" ? aws_lambda_function.{{ resource_id }} : data.aws_lambda_function.{{ resource_id }}
  }
}

resource "aws_api_gateway_authorizer" "{{ resource_id }}" {
  count = (terraform.workspace == "default") && ("{{ step }}" == "update") ? 1 : 0
  name = "{{ resource_name }}-auth"
  rest_api_id = local.{{ resource_id }}.api_id
  authorizer_uri = local.{{ resource_id }}.authorizer_uri
}

{% for res, entry in writer.entries.items() %}
  {%- if entry.path %}
    resource "aws_api_gateway_resource" "{{ resource_id }}_{{ res }}" {
      count = terraform.workspace == "default" && "{{ step }}" == "update" ? 1 : 0
      rest_api_id = local.{{ resource_id }}.api_id
      {% if entry.parent_is_root %}
        parent_id = local.{{ resource_id }}.api_root_id
      {% else %}
        parent_id = aws_api_gateway_resource.{{ resource_id }}_{{ entry.parent_uid }}[0].id
      {% endif %}
      path_part = "{{ entry.path }}"
    }
  {% endif -%}
  {%- if entry.methods %}
    {% for method in entry.methods %}
      resource "aws_api_gateway_method" "{{ resource_id }}_{{ res }}_{{ method }}" {
        count = terraform.workspace == "default" && "{{ step }}" == "update" ? 1 : 0
        rest_api_id = local.{{ resource_id }}.api_id
        {%- if entry.is_root %}
          resource_id = local.{{ resource_id }}.api_root_id
        {% else %}
          resource_id = aws_api_gateway_resource.{{ resource_id }}_{{ res }}[0].id
        {% endif -%}
        http_method = "{{ method }}"
        authorization = "CUSTOM"
        authorizer_id = aws_api_gateway_authorizer.{{ resource_id }}[0].id
      }

      resource "aws_api_gateway_integration" "{{ resource_id }}_{{ res }}_{{ method }}" {
        count = terraform.workspace == "default" && "{{ step }}" == "update" ? 1 : 0
        rest_api_id = local.{{ resource_id }}.api_id
        {%- if entry.is_root %}
          resource_id = local.{{ resource_id }}.api_root_id
        {% else %}
          resource_id = aws_api_gateway_resource.{{ resource_id }}_{{ res }}[0].id
        {% endif -%}
        http_method = join("", aws_api_gateway_method.{{ resource_id }}_{{ res }}_{{ method }}.*.http_method)
        integration_http_method = "POST"
        type = "AWS_PROXY"
        uri = local.{{ resource_id }}.lambda_uri
      }
    {% endfor %}

    {# Preflighted requests in CORS #}

    {%- if entry.cors %}
      resource "aws_api_gateway_method" "{{ resource_id }}_{{ res }}_OPTIONS" {
        count = terraform.workspace == "default" && "{{ step }}" == "update" ? 1 : 0
        rest_api_id = local.{{ resource_id }}.api_id
        {%- if entry.is_root %}
          resource_id = local.{{ resource_id }}.api_root_id
        {% else %}
          resource_id = aws_api_gateway_resource.{{ resource_id }}_{{ res }}[0].id
        {% endif -%}
        http_method = "OPTIONS"
        authorization = "NONE"
      }

      resource "aws_api_gateway_integration" "{{ resource_id }}_{{ res }}_OPTIONS" {
        count = terraform.workspace == "default" && "{{ step }}" == "update" ? 1 : 0
        rest_api_id = local.{{ resource_id }}.api_id
        {%- if entry.is_root %}
          resource_id = local.{{ resource_id }}.api_root_id
        {% else %}
          resource_id = aws_api_gateway_resource.{{ resource_id }}_{{ res }}[0].id
        {% endif -%}
        http_method = join("", aws_api_gateway_method.{{ resource_id }}_{{ res }}_OPTIONS.*.http_method)
        type = "MOCK"
        request_templates = {
          "application/json" = "{ \"statusCode\": 200 }"
        }
      }

      resource "aws_api_gateway_integration_response" "{{ resource_id }}_{{ res }}_OPTIONS" {
        count = terraform.workspace == "default" && "{{ step }}" == "update" ? 1 : 0
        rest_api_id = local.{{ resource_id }}.api_id
        {%- if entry.is_root %}
          resource_id = local.{{ resource_id }}.api_root_id
        {% else %}
          resource_id = aws_api_gateway_resource.{{ resource_id }}_{{ res }}[0].id
        {% endif -%}
        http_method =  join("", aws_api_gateway_method.{{ resource_id }}_{{ res }}_OPTIONS.*.http_method)
        response_parameters = {
        {%- for k,v in entry.cors.get_access_control_headers().items() %}
          "method.response.header.{{ k }}" = "'{{ v }}'",
        {% endfor -%}
        }
        status_code = 200
        response_templates = {
        "application/json": "{}"
        }
        depends_on = [
        aws_api_gateway_integration.{{ resource_id }}_{{ res }}_OPTIONS,
        aws_api_gateway_method_response.{{ resource_id }}_{{ res }}_OPTIONS,
        ]
      }

      resource "aws_api_gateway_method_response" "{{ resource_id }}_{{ res }}_OPTIONS" {
        count = terraform.workspace == "default" && "{{ step }}" == "update" ? 1 : 0
        rest_api_id = local.{{ resource_id }}.api_id
        {%- if entry.is_root %}
          resource_id = local.{{ resource_id }}.api_root_id
        {% else %}
          resource_id = aws_api_gateway_resource.{{ resource_id }}_{{ res }}[0].id
        {% endif -%}
        http_method = join("", aws_api_gateway_method.{{ resource_id }}_{{ res }}_OPTIONS.*.http_method)
        status_code = 200
        response_models = {
          "application/json" = "Empty"
        }
        response_parameters = {
          "method.response.header.Access-Control-Allow-Headers" = true,
          "method.response.header.Access-Control-Allow-Methods" = true,
          "method.response.header.Access-Control-Allow-Origin" = true
        }

        depends_on = [
          aws_api_gateway_method.{{ resource_id }}_{{ res }}_OPTIONS,
        ]
      }
    {% endif -%}
  {% endif -%}
{% endfor %}

{# API Deployments #}

resource "aws_api_gateway_deployment" "{{ resource_id }}" {
  count = (terraform.workspace != "default") && ("{{ step }}" == "update") ? 1 : 0
  rest_api_id = local.{{ resource_id }}.api_id
  stage_name = terraform.workspace
}

# ---------------------------------------------------------------------------------------------------------------------
# OUTPUT
# ---------------------------------------------------------------------------------------------------------------------

output "{{ resource_id }}" {
value = {
    "invoke-url-{{ step }}" = terraform.workspace != "default" && "{{ step }}" == "update" ? join("", aws_api_gateway_deployment.{{ resource_id }}.*.invoke_url) : null
  }
}
